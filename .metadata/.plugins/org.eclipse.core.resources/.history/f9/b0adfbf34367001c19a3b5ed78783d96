package com.project1.invoiceInfo.controller;

import com.project1.invoiceInfo.entity.InvoiceInfo;
import com.project1.invoiceInfo.entity.Product;
import com.project1.invoiceInfo.service.InvoiceInfoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.support.PagedListHolder;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.ArrayList;
import java.util.List;

@Controller
public class InvoiceInfoController {
    @Autowired
    private InvoiceInfoService invoiceInfoService;

    @GetMapping("/")
    public String InvoiceInfoListPage(Model model) {
//        model.addAttribute("InvoiceInfoList", invoiceInfoService.getAllInvoiceInfo());
//        model.addAttribute("products",invoiceInfoService.getAllProducts());
//        return "Home";
    	return findPaginated(1, model);
    }

    @GetMapping("/openNewInvoiceInfoForm")
    public String openNewInvoiceInfoForm(Model model) {
        InvoiceInfo invoiceInfo = new InvoiceInfo();
        model.addAttribute("invoiceInfo", invoiceInfo);
        return "new_invoiceInfo";
    }
//    @RequestMapping(value="/openNewInvoiceInfoForm", params={"addRow"})
//    public String addRow(final InvoiceInfo invoiceInfo) {
//        invoiceInfo.getListOfProducts().add(new Product());
//        return "openNewInvoiceInfoForm";
//    }
//
//
//    @RequestMapping(value="/openNewInvoiceInfoForm", params={"removeRow"})
//    public String removeRow(final InvoiceInfo invoiceInfo, final HttpServletRequest req) {
//        final Integer productId = Integer.valueOf(req.getParameter("removeRow"));
//        invoiceInfo.getListOfProducts().remove(productId.intValue());
//        return "openNewInvoiceInfoForm";
//    }

    @PostMapping("/saveInvoice")
    public String saveInvoiceInfo(@ModelAttribute("invoiceInfo") InvoiceInfo invoiceInfo) {
//        model.addAttribute("list",product.toString());
//        System.out.println(product.toString());
        System.out.println(invoiceInfo);
        
        invoiceInfoService.saveInvoiceInfo(invoiceInfo);
        return "redirect:/";
    }

    @GetMapping("/editInvoiceForm/{id}")
    public String editInvoiceForm(@PathVariable(value = "id") long id , Model model) {
        InvoiceInfo invoiceInfo= invoiceInfoService.getInvoiceById(id);
        model.addAttribute("invoiceInfo",invoiceInfo);
        return "update_invoiceInfo";
    }
    @GetMapping("/deleteInvoiceByid/{id}")
    public String deleteInvoiceByid(@PathVariable(value = "id") long id){
            this.invoiceInfoService.deleteInvoiceById(id);
            return "redirect:/";
    }
    @GetMapping("/page/{pageNo}")
    public String findPaginated(@PathVariable("pageNo")int pageNo,Model model) {
    	
//    	 model.addAttribute("InvoiceInfoList", invoiceInfoService.getAllInvoiceInfo());
//         model.addAttribute("products",invoiceInfoService.getAllProducts());
    	int pageSize=5;
    	Page<InvoiceInfo> page = invoiceInfoService.findPaginated(pageNo, pageSize);
    	List<InvoiceInfo> listOfInvoiceInfos=page.getContent();
    	model.addAttribute("currentPage", pageNo);
    	model.addAttribute("totalPages", page.getTotalPages());
    	model.addAttribute("totalItems" ,page.getTotalElements());
    	model.addAttribute("listOfInvoiceInfos",listOfInvoiceInfos);
    	model.addAttribute("size", page.getSize());
        model.addAttribute("data",listOfInvoiceInfos);
    	return "Home";
    }
    @GetMapping("/{page}")
    public ModelAndView showUser(@PathVariable(required=false, name="page") String page, HttpServletRequest request, HttpServletResponse response) {
        ModelAndView mv = new ModelAndView();
        PagedListHolder<InvoiceInfo> invoiceInfoList;
        if(page == null) {
        	invoiceInfoList = new PagedListHolder<InvoiceInfo>();
          List<InvoiceInfo> listOfInvoice = invoiceInfoService.getAllInvoiceInfo();
          // Setting the source for PagedListHolder
          invoiceInfoList.setSource(listOfInvoice);
          invoiceInfoList.setPageSize(2);
          // Setting PagedListHolder instance to session
          request.getSession().setAttribute("userList", invoiceInfoList);
        }else if(page.equals("prev")) {
          // get the user list from session
        	invoiceInfoList = (PagedListHolder<User>)request.getSession().getAttribute("userList");
          // switch to previous page
        	invoiceInfoList.previousPage();
        }else if(page.equals("next")) {
        	invoiceInfoList = (PagedListHolder<InvoiceInfo>)request.getSession().getAttribute("userList");
          // switch to next page
        	invoiceInfoList.nextPage();
        }else {
          int pageNum = Integer.parseInt(page);
          invoiceInfoList = (PagedListHolder<InvoiceInfo>)request.getSession().getAttribute("userList");
          // set the current page number
          // page number starts from zero in PagedListHolder that's why subtracting 1
          invoiceInfoList.setPage(pageNum - 1);
        }
        
        mv.setViewName("user");
        return mv;
    
    }
    
    
}
