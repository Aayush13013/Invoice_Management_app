package com.project1.invoiceInfo.controller;

import java.util.LinkedHashSet;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.project1.invoiceInfo.entity.InvoiceInfo;
import com.project1.invoiceInfo.service.InvoiceInfoService;

@Controller
public class InvoiceInfoController {
    @Autowired
    private InvoiceInfoService invoiceInfoService;

    @GetMapping("/")
    public String InvoiceInfoListPage(Model model) {
        model.addAttribute("InvoiceInfoList", invoiceInfoService.getAllInvoiceInfo());
        model.addAttribute("products",invoiceInfoService.getAllProducts());
        return "Home";
    	
    }

    @GetMapping("/openNewInvoiceInfoForm")
    public String openNewInvoiceInfoForm(Model model) {
        InvoiceInfo invoiceInfo = new InvoiceInfo();
        model.addAttribute("invoiceInfo", invoiceInfo);
        return "new_invoiceInfo";
    }


    @PostMapping("/saveInvoice")
    public String saveInvoiceInfo(@ModelAttribute("invoiceInfo") InvoiceInfo invoiceInfo) {

//        System.out.println(invoiceInfo);
        
        invoiceInfoService.saveInvoiceInfo(invoiceInfo);
        return "redirect:/showInvoice";
    }

    @GetMapping("/editInvoiceForm/{id}")
    public String editInvoiceForm(@PathVariable(value = "id") long id , Model model) {
        InvoiceInfo invoiceInfo= invoiceInfoService.getInvoiceById(id);
        model.addAttribute("invoiceInfo",invoiceInfo);
        return "update_invoiceInfo";
    }
    @GetMapping("/deleteInvoiceByid/{id}")
    public String deleteInvoiceByid(@PathVariable(value = "id") long id){
            this.invoiceInfoService.deleteInvoiceById(id);
            return "redirect:/";
    }
    
    @GetMapping("/showInvoice")
    public String showInvoiceInfo(Model model , Pageable pageable) {
    	 Page<InvoiceInfo> pages=invoiceInfoService.getPage(pageable);
    	 model.addAttribute("number", pages.getNumber());
    	 model.addAttribute("totalPages", pages.getTotalPages());
    	 model.addAttribute("totalElements", pages.getTotalElements());
    	 model.addAttribute("size", pages.getSize());
    	 model.addAttribute("data",pages.getContent());
         return "Home";
    }
    
    private static final int PAGE_SIZE = 2; // Number of rows to contain per page
    private long totalUsersCount; // number of rows in Database
    
    private PageRequest gotoPage(int page) {
        PageRequest request = new PageRequest(page, PAGE_SIZE,Sort.Direction.DESC,"id");
        return request;
    }
    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String index(HttpSession session, Model model, @RequestParam(value = "pageNo", required = false, defaultValue = "0") String pageNo) {
        int lastPageNo;
        int gotoPageNo = Integer.parseInt(pageNo);
        Set < User > allUsers = new LinkedHashSet < User > ();

        //session.setAttribute("currentPageNo", 0);

        for (User u: userRepo.findAll(gotoPage(gotoPageNo))) // fetches rows from Database as per Page No
        {
            allUsers.add(u);
        }


        totalUsersCount = userRepo.count(); //total no of users
        if (totalUsersCount % PAGE_SIZE != 0)
            lastPageNo = (int)(totalUsersCount / PAGE_SIZE) + 1; // get last page No (zero based)
        else
            lastPageNo = (int)(totalUsersCount / PAGE_SIZE);


        model.addAttribute("lastPageNo", lastPageNo);
        model.addAttribute("users", allUsers);
        return "index";
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
//    @GetMapping("/page/{pageNo}")
//    public String findPaginated(@PathVariable("pageNo")int pageNo,Model model) {
//    	
////    	 model.addAttribute("InvoiceInfoList", invoiceInfoService.getAllInvoiceInfo());
////         model.addAttribute("products",invoiceInfoService.getAllProducts());
//    	int pageSize=5;
//    	Page<InvoiceInfo> page = invoiceInfoService.findPaginated(pageNo, pageSize);
//    	List<InvoiceInfo> listOfInvoiceInfos=page.getContent();
//    	model.addAttribute("currentPage", pageNo);
//    	model.addAttribute("totalPages", page.getTotalPages());
//    	model.addAttribute("totalItems" ,page.getTotalElements());
//    	model.addAttribute("listOfInvoiceInfos",listOfInvoiceInfos);
//    	model.addAttribute("size", page.getSize());
//        model.addAttribute("data",listOfInvoiceInfos);
//    	return "Home";
//    }
//    @GetMapping("/{page}")
//    public ModelAndView showUser(@PathVariable(required=false, name="page") String page, HttpServletRequest request, HttpServletResponse response) {
//        ModelAndView mv = new ModelAndView();
//        PagedListHolder<InvoiceInfo> invoiceInfoList;
//        if(page == null) {
//        	invoiceInfoList = new PagedListHolder<InvoiceInfo>();
//          List<InvoiceInfo> listOfInvoice = invoiceInfoService.getAllInvoiceInfo();
//          // Setting the source for PagedListHolder
//          invoiceInfoList.setSource(listOfInvoice);
//          invoiceInfoList.setPageSize(2);
//          // Setting PagedListHolder instance to session
//          request.getSession().setAttribute("userList", invoiceInfoList);
//        }else if(page.equals("prev")) {
//          // get the user list from session
//        	invoiceInfoList = (PagedListHolder<InvoiceInfo>)request.getSession().getAttribute("userList");
//          // switch to previous page
//        	invoiceInfoList.previousPage();
//        }else if(page.equals("next")) {
//        	invoiceInfoList = (PagedListHolder<InvoiceInfo>)request.getSession().getAttribute("userList");
//          // switch to next page
//        	invoiceInfoList.nextPage();
//        }else {
//          int pageNum = Integer.parseInt(page);
//          invoiceInfoList = (PagedListHolder<InvoiceInfo>)request.getSession().getAttribute("userList");
//          // set the current page number
//          // page number starts from zero in PagedListHolder that's why subtracting 1
//          invoiceInfoList.setPage(pageNum - 1);
//        }
//        
//        mv.setViewName("Home");
//        return mv;
//    
//    }
    
    
}
